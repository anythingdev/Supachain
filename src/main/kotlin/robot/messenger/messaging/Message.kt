@file:Suppress("UNUSED_PARAMETER", "unused")

package dev.supachain.robot.messenger.messaging

import dev.supachain.robot.messenger.Role
import dev.supachain.robot.provider.tools.OpenAIToolReceive
import dev.supachain.utilities.toJson
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.Transient

/**
 * Represents a message exchanged within a conversation.
 *
 * This class encapsulates essential information about a message, including its:
 *
 * - **Role:** Indicates the origin or purpose of the message, such as `SYSTEM` (instructions),
 *   `USER` (input), `ASSISTANT` (AI-generated response), or `FUNCTION` (function call or result).
 * - **Content:** The actual textual content of the message.
 * - **Name:** (Optional) An identifier for the message sender (e.g., a user's name).
 * - **Call ID:** (Optional) An ID associated with a function call related to this message.
 * - **Tool Calls:** (Optional) A list of tool calls initiated by this message (if the message is from the assistant).
 * - **Function Call:** (Optional) Details of a function call associated with this message.
 * - **Type:**  Indicates the type of content within the message (defaulting to 'Text'). Could be extended to support
 *   other types like 'Image', 'Audio', etc. (Note: this property is marked as `@Transient` for serialization purposes)
 *
 * @property role The role of the message sender.
 * @property content The text content of the message.
 * @property name (Optional) An identifier for the message sender.
 * @property callId (Optional) An ID associated with a function call.
 * @property toolCalls (Optional) A list of tool calls.
 * @property functionCall (Optional) Details of a function call.
 * @property type The type of message content (currently not serialized).
 *
 * @since 0.1.0-alpha
 * @version 1.0.0

 */
@Serializable
data class Message(
    val role: Role,
    var content: String,
    var name: String? = null,
    @SerialName("tool_call_id")
    var callId: String? = null,
    @SerialName("tool_calls")
    val toolCalls: List<ToolCall>? = emptyList(),
    @SerialName("function_call")
    val functionCall: FunctionCall? = null,
    @Transient val type: Type = Type.Text
) {
    override fun toString() = this.toJson()

    /**
     * Defines the Content Types of Messages in an AI Conversation
     *
     * This enumeration specifies the various types of content that can be exchanged as messages within an AI-powered
     * conversation. Different message types enable the AI to understand and process diverse forms of information beyond
     * simple text.
     *
     * Available Message Types:
     *
     * - `Image`:  Represents visual content such as photographs, diagrams, or charts.
     * - `Text`:  Represents textual information, including natural language conversations, instructions, or data.
     * - `Audio`: Represents sound-based content, such as voice recordings, music, or sound effects.
     * - `Document`:  Represents structured documents like PDFs, Word files, or presentations.
     * - `Function`:  Represents a request to execute a tool or function, typically used to obtain information or perform
     *                actions beyond the AI model's direct capabilities.
     *
     * @since 0.1.0-alpha

     */
    enum class Type {
        Image, Text, Audio, Document, Function
    }

    /**
     * Represents an assistant message in an AI conversation.
     *
     * This value class encapsulates a `Message` object specifically for messages generated by the AI assistant.
     * It provides convenient access to the message's role, content, tool calls, and function call information.
     *
     * @property data The underlying `Message` object containing the assistant message details.
     *
     * @since 0.1.0-alpha

     */
    @JvmInline
    @Serializable
    value class FromAssistant(val data: Message) {
        val role: Role get() = data.role
        var content: String
            get() = data.content
            set(value) {
                data.content
            }

        // Optional
        @SerialName("tool_calls")
        @Serializable(with = OpenAIToolReceive::class)
        var toolCalls: List<ToolCall>? get() = data.toolCalls
        set(value) {
            data.toolCalls
        }
        val functionCall: FunctionCall? get() = data.functionCall
    }
}